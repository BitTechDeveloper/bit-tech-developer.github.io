!function(){"use strict";var e,t={344:function(){function e(e){return document.querySelector(e)}function t(e){return document.querySelectorAll(e)}function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=document.createElement(e);return t&&(n.textContent=t),n}function a(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}document.addEventListener("DOMContentLoaded",(function(){var r=t(".step"),c=t(".next"),o=t(".prev"),i=(t("[data-step]"),t(".nav-btn")),l=e("#toggle"),s=e("[name='name']");s.value=JSON.parse(localStorage.getItem("nameInput"));var u=e("[name='email']");u.value=JSON.parse(localStorage.getItem("emailInput"));var d=e("[name='phone']");d.value=JSON.parse(localStorage.getItem("phoneInput"));var f=a(t("input[name='plan']")),p=a(t(".plan-label")),v=(a(t(".plan-price")),e(".monthly-description")),m=e(".yearly-description"),h=a(t(".discount")),y="mo",g=t("input[name='add-on']"),E=(a(t("[name='add-on']:checked")),e(".summary-addon-list")),S="monthly",k=JSON.parse(localStorage.getItem("currentStep"))||0;function x(e){r.forEach((function(t,n){n===e?t.classList.add("active"):t.classList.remove("active")}))}function L(){i.forEach((function(e,t){t===k?e.classList.add("active"):e.classList.remove("active"),k===r.length-1&&(i[i.length-1].style.backgroundColor="hsl(228, 100%, 84%)")}))}function C(){k>0&&(x(--k),L(),localStorage.setItem("currentStep",JSON.stringify(k)))}function I(){f.forEach((function(e){"archade"===e.id?(e.value="yearly"===S?90:9,e.nextElementSibling.textContent="$".concat(e.value,"/").concat(y)):"advance"===e.id?(e.value="yearly"===S?120:12,e.nextElementSibling.textContent="$".concat(e.value,"/").concat(y)):"pro"===e.id&&(e.value="yearly"===S?150:15,e.nextElementSibling.textContent="$".concat(e.value,"/").concat(y)),e.addEventListener("click",(function(){e.checked?e.parentElement.classList.add("selected-plan"):e.parentElement.classList.remove("selected-plan")}))})),"yearly"===S?(v.classList.remove("active"),m.classList.add("active"),h.forEach((function(e){e.textContent="2 months free"}))):(m.classList.remove("active"),v.classList.add("active"),h.forEach((function(e){e.textContent=""})))}function O(){var t=e(".summary-plan-title"),n=e(".summary-plan-price"),a=e(".summary-plan-change-link");f.forEach((function(e){if(e.checked){var a=e.parentElement.parentElement,r=a.querySelector(".plan-title"),c=a.querySelector(".plan-price");t.textContent="".concat(r.textContent," (").concat(S,")"),n.textContent="".concat(c.textContent)}})),a.addEventListener("click",(function(){x(k=1),localStorage.setItem("currentStep",JSON.stringify(k))}))}function b(){g.forEach((function(t){var a=t.parentElement,r=a.querySelector(".addon-title"),c=a.querySelector(".addon-price"),o=n("li"),i="".concat(t.id,"summary");o.id=i;var l=e("#".concat(i));o.classList.add("flex","item-center","justify-between"),o.innerHTML='\n                <span class="text-sm text-gray-700">'.concat(r.textContent,'</span>\n                <span class="text-sm">').concat(c.textContent,"</span>\n            "),t.checked&&!l?E.append(o):!t.checked&&l&&l.remove()}))}function J(){var e=0;return f.forEach((function(t){t.checked&&"archade"===t.id?e="yearly"===S?90:9:t.checked&&"advance"===t.id?e="yearly"===S?120:12:t.checked&&"pro"===t.id&&(e="yearly"===S?150:15)})),e}f.forEach((function(e,t){e.checked=JSON.parse(localStorage.getItem("planInput".concat(t)))})),g.forEach((function(e,t){e.checked=JSON.parse(localStorage.getItem("addonInput".concat(t)))}));var N=J();function j(){var e=0;return g.forEach((function(t){t.checked&&"service"===t.id?e+="yearly"===S?10:1:!t.checked||"storage"!==t.id&&"profile"!==t.id||(e+="yearly"===S?20:2)})),e}var q=j(),w=N+q;function A(){var t=e(".total-title");t.classList.add("text-sm");var n=e(".total-price");n.classList.add("text-lg","font-bold","text-[hsl(243,_100%,_62%)]"),t.textContent="Total (per ".concat(S.slice(0,-2),")"),n.textContent="$".concat(w,"/").concat(y)}x(k),L(),I(),O(),b(),o.forEach((function(e){e.addEventListener("click",C)})),c.forEach((function(t){t.addEventListener("click",(function(){(function(){if(0===k&&(""===s.value||""===u.value||""===d.value)){var t=n("p");t.classList.add("absolute","text-red-700","-top-5","left-0"),t.id="invalid-message1";var a=e("#invalid-message1");t.textContent="All fields are required";var r=e("#step1").querySelector(".input-wrapper");return a||r.append(t),setTimeout((function(){t.remove()}),5e3),!1}if(1===k&&!f[0].checked&&!f[1].checked&&!f[2].checked){var c=n("p");c.classList.add("absolute","text-red-700","-top-5","left-0"),c.id="invalid-message2";var o=e("#invalid-message2");c.textContent="You didn't choose any plan";var i=e("#step2").querySelector(".input-wrapper");return o||i.append(c),setTimeout((function(){c.remove()}),5e3),!1}return!0})()&&(1===k&&f.forEach((function(e,t){localStorage.setItem("planInput".concat(t),JSON.stringify(!0===e.checked))})),2===k&&g.forEach((function(e,t){localStorage.setItem("addonInput".concat(t),JSON.stringify(!0===e.checked))})),k<r.length-1&&(x(++k),L(),localStorage.setItem("currentStep",JSON.stringify(k))))}))})),s.addEventListener("keyup",(function(){localStorage.setItem("nameInput",JSON.stringify(s.value))})),u.addEventListener("keyup",(function(){localStorage.setItem("emailInput",JSON.stringify(u.value))})),d.addEventListener("keyup",(function(){localStorage.setItem("phoneInput",JSON.stringify(d.value))})),f.forEach((function(e){e.addEventListener("click",(function(){O(),N=J(),w=N+q,A();var t=e.parentElement.parentElement;p.forEach((function(e){e.classList.remove("active")})),e.checked&&t.classList.add("active")}))})),g.forEach((function(e){e.addEventListener("click",(function(){O(),b(),q=j(),w=N+q,A()}))})),c.forEach((function(e){e.addEventListener("click",(function(){1===k&&(I(),O(),b())}))})),l.addEventListener("change",(function(e){for(S=toggle.checked?"yearly":"monthly",y="yearly"===S?"yr":"mo",I(),g.forEach((function(e){"service"===e.id?(e.value="yearly"===S?10:1,e.parentElement.lastElementChild.textContent="$".concat(e.value,"/").concat(y)):("storage"===e.id||"profile"===e.id)&&(e.value="yearly"===S?20:2,e.parentElement.lastElementChild.textContent="$".concat(e.value,"/").concat(y))})),O();E.firstElementChild;)E.removeChild(E.firstElementChild);b(),N=J(),q=j(),w=N+q,A()})),k===r.length-1&&localStorage.clear()}))}},n={};function a(e){var r=n[e];if(void 0!==r)return r.exports;var c=n[e]={exports:{}};return t[e](c,c.exports,a),c.exports}a.m=t,e=[],a.O=function(t,n,r,c){if(!n){var o=1/0;for(u=0;u<e.length;u++){n=e[u][0],r=e[u][1],c=e[u][2];for(var i=!0,l=0;l<n.length;l++)(!1&c||o>=c)&&Object.keys(a.O).every((function(e){return a.O[e](n[l])}))?n.splice(l--,1):(i=!1,c<o&&(o=c));if(i){e.splice(u--,1);var s=r();void 0!==s&&(t=s)}}return t}c=c||0;for(var u=e.length;u>0&&e[u-1][2]>c;u--)e[u]=e[u-1];e[u]=[n,r,c]},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e={47:0,742:0};a.O.j=function(t){return 0===e[t]};var t=function(t,n){var r,c,o=n[0],i=n[1],l=n[2],s=0;if(o.some((function(t){return 0!==e[t]}))){for(r in i)a.o(i,r)&&(a.m[r]=i[r]);if(l)var u=l(a)}for(t&&t(n);s<o.length;s++)c=o[s],a.o(e,c)&&e[c]&&e[c][0](),e[c]=0;return a.O(u)},n=self.webpackChunksample_projects=self.webpackChunksample_projects||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}();var r=a.O(void 0,[742],(function(){return a(344)}));r=a.O(r)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,